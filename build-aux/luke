#!/usr/bin/env lua

--[[
  TODO:
  - consolidate searchlibs with external_libraries
  - remove conftest.o, conftest and other file droppings
  - add a --log mode for tracing configs i/o
]]


-- Everything is preloaded.
package.searchers = package.searchers or package.loaders
for i = 2, #package.searchers do
  package.searchers[i] = nil
end



package.preload['luke'] = function()
  local _ENV = require  'std.normalize' {
    'luke.cli',
    'luke.compile',
    'luke.configure',
    'luke.environment',
    'luke.lukefile',
    'std.functional',
  }


  local function run_ldocs(L, env, ldocs)
    if L.verbose == nop then
      L.write('creating LDocs...')
    end
    return built_ok(L, run_command(L, env, flatten{'$LDOC -c', ldocs.sources, '.'}))
  end


  return {
    main = function(args)
      local L    = parse_arguments(args)
      local env  = makeenv(L.clidefs, L.luke.variables, DEFAULTENV, SHELLENV)
      local conf = makeenv(CONFIGENV, env)

      if not isempty(L.luke.ldocs) then
        conf = config_ldoc(L, conf)
        env = makeenv(env, {LDOC=conf.LDOC})
      end

      local c = c_modules(L.luke.modules)
      if not isempty(c) then
        conf = config_compiler(L, conf)
        env = makeenv(env, {CC=conf.CC})
      end
      run_configs(L, conf, L.luke) -- FIXME: shouldn't mutate L.luke here
      L.luke = run_templates(L, env, L.luke)

      local status = dropuntil(c, isnonzero, function(name)
        return build_c_module(L, env, L.luke, name)
      end) or 0

      run_ldocs(L, env, L.luke.ldocs)

      return install_modules(L, env, L.luke, L.install)
    end,
  }
end



package.preload['luke._base'] = function()
  local _ENV = require  'std.normalize' {}

  return {
    fatal = function(...)
      local msg = (...)
      if select("#", ...) > 1 then
        msg = format(...)
      end
      stderr:write('luke: fatal: ' .. msg .. '\n')
      exit(1)
    end
  }
end



package.preload['luke.cli'] = function()
  local _ENV = require  'std.normalize' {
    'luke._base',
    'luke.lukefile',
    'std.functional',
  }


  local function version()
    print [[
luke (Luke) 0.0.0
Written by Gary V. Vaughan <gary@gnu.org>, 2014

Copyright (C) 2016, Gary V. Vaughan
Luke comes with ABSOLUTELY NO WARRANTY.
You may redistribute copies of Luke under the terms of the MIT license;
it may be used for any purpose at absolutely no cost, without permission.
See <https://mit-license.org> for details.
]]
    exit(0)
  end


  local function help()
    print [[
Usage: luke [OPTION]... [VAR=VALUE]... [TARGET]

Use the source, Luke!

  --help        print this help, then exit
  --version     print version number, then exit
  --file=FILE   use FILE instead of lukefile
  --quiet       without any output
  --verbose     provide more progress output

Each TARGET can be one of the module table keys from lukefile, or:

  all           build all targets in lukefile
  install       copy all built targets to $PREFIX

If no TARGET is given, 'all' is implied.

Report bugs to https://github.com/gvvaughan/luke/issues.]]
    exit(0)
  end


  local function opterr(msg)
    if match(msg, '%.$') == nil then
      msg = msg .. '.'
    end
    stderr:write('luke: error: ' .. msg .. '\n')
    stderr:write("luke: try '" .. arg[0] .. " --help' for help.\n")
    exit(2)
  end


  local function display(...)
    return stdout:write(concat{...})
  end


  return {
    parse_arguments = function(args)
      local clidefs, fname, targets, install = {}, 'lukefile', {}, {}
      local verbose, write = nop, display

      map(args, function(opt)
        case(opt, {
          ['--file=(.+)'] = function(optarg)
            fname = optarg
          end,

          ['--quiet'] = function()
            write = nop
          end,

          ['--verbose'] = function()
            verbose = display
          end,

          ['--help'] = help,

          ['--version'] = version,

          ['(.+)=(.+)'] = function(name, value)
            clidefs[name] = value
          end,

          function(opt)
            if match(opt, '^-') ~= nil then
              opterr(format("unrecognized option '%s'", opt))
            end
            append(targets, opt)
          end,
        })
      end)


      local luke, err = loadluke(fname)
      if luke == nil then
        fatal('bad ' .. fname .. ': ' .. err)
      end

      if isempty(luke.modules or {}) then
        fatal("no modules table in '%s', nothing to build", args.file)
      end

      targets = call(function()
        if isempty(targets) or contains(targets, 'all') then
          return except(flatten(targets, keys(luke.modules)), 'all')
        end
        local r = filter(targets, function(target)
          if target ~= 'install' and luke.modules[target] == nil then
            fatal("no rule to make target '%s'", target)
          end
          return true
        end)
        assert(len(r) > 0, "no build targets specified")
        return r
      end)

      local build = pluck(targets, luke.modules)
      if contains(targets, 'install') then
        install = build or luke.modules
      end
      luke.modules = build

      return {
        clidefs = clidefs,
        install = install,
        luke    = luke,
        verbose	= verbose,
        write	= write,
      }
    end,
  }
end



package.preload['luke.compile'] = function()
  local _ENV = require  'std.normalize' {
    'luke._base',
    'luke.configure',
    'luke.environment',
    'std.functional',

    SHELLMETACHARS = '[%s%$"]',
  }


  local function run(L, env, command)
    L.write(interpolate(env, concat(command, ' ')), '\n')
    local status, err, out = spawn(env, unpack(command))
    if status ~= 0 then
      if L.write == nop then
        stdout:write(concat(command, ' ') .. '\n')
      end
      stderr:write(err .. '\n')
    end
    return status, out, err
  end


  local function defines(env, deftables)
    return zip_with(merge({}, unpack(deftables)), function(name, value)
      local fmt = cond(
        {[int(value) == 1]			= '-D%s'	},
        {[match(value, SHELLMETACHARS) ~= nil]	= "-D%s='%s'"	},
        {[true]					= '-D%s=%s'	}
      )
      return format(fmt, name, value)
    end)
  end


  local function incdirs(...)
    return map(flatten(...), function(v)
      return '-I' .. v
    end)
  end


  local function c_module_path(objdir, name)
    return format('%s/%s.$LIB_EXTENSION', objdir, gsub(name, '%.', '/'))
  end


  local function c_source(module, objdir)
    local path = gsub(module, '%.', '/')
    local src = c_module_path(objdir, path)
    return src, (gsub('$INST_LIBDIR/' .. path, '/[^/]+$', ''))
  end


  local function lua_source(module, src)
    local abspath = '$INST_LUADIR/' .. gsub(module, '%.', '/')
    if match(src, '/init%.lua$') then
      abspath = abspath .. '/init'
    end
    abspath = abspath .. '.lua'
    return src, (gsub(abspath, '/[^/]+%.lua$', ''))
  end


  local function module_to_path(module, sources, objdir)
    return dropuntil(sources, function(source)
      return case(source, {
        ['.*%.[ch]']       = bind(c_source, {module, objdir}),
        ['(.*%.[ch])%.in'] = bind(c_source, {module, objdir}),
        ['.*%.lua']        = bind(lua_source, {module}),
        ['(.*%.lua)%.in']  = bind(lua_source, {module}),

        function(src)
          fatal("unsupported source type '%s'", src)
        end,
      })
    end)
  end


  local function built_ok(L, ...)
    if L.verbose == nop then
      L.write((...) and 'ok\n' or 'failed\n')
    end
    return ...
  end


  return {
    built_ok = built_ok,

    build_c_module = function(L, env, luke, name)
      local rules = luke.modules[name]
      local c_module = c_module_path(luke.variables.objdir, name)
      local command = {
        '$COMPILE',
        defines(env, except(pack(rules.defines, luke.defines), nil)),
        incdirs(rules.incdirs, luke.incdirs),
        rules.sources,
        '-o', c_module,
        '$LIBS',
        rules.libraries,
      }
      return built_ok(L, run(L, env, flatten(command)))
    end,

    c_modules = function(modules)
      return filter(keys(modules), function(name)
        return dropuntil(modules[name].sources, bind(match, {[2]='%.[ch]$'}))
      end)
    end,

    install_modules = function(L, env, luke, modules)
      return reduce(keys(modules), 0, function(status, name)
        if status == 0 then
          local src, dir = module_to_path(name, modules[name].sources, luke.variables.objdir)
          if open(interpolate(env, dir)) == nil then
            status = run(L, env, {'$MAKEDIRS', dir})
          end
          if status == 0 then
            status = run(L, env, {'$INSTALL', src, dir .. '/'})
          end
        end
        return status
      end)
    end,

    run_command = run,
  }
end



package.preload['luke.configure'] = function(...)
  local _ENV = require 'std.normalize' {
    'luke._base',
    'luke.environment',
    'std.functional',
    'type.context-manager',
    'type.dict',

    CCPROGS = {'cc', 'gcc', 'clang'},
  }


  local function spawn(env, ...)
    local out, err = tmpname(), tmpname()
    local cmd = concat {
      interpolate(env, concat({...}, ' ')), ' >', out, ' 2>', err, '; printf $?'
    }
    return int(slurp(Pipe(cmd))), slurp(File(err)), slurp(File(out))
  end


  local function checking(L, ...)
    L.verbose('checking ', concat({...}, ' '), '... ')
  end


  local function found_library(L, x)
    if x == nil or x == '' then
      L.verbose 'none required'
    else
      L.verbose(x)
    end
    L.verbose '\n'
    return x
  end


  local function found_prog(L, x)
    L.verbose(x and 'yes\n' or 'no\n')
    return x
  end


  local function found_result(L, x)
    L.verbose(x == 1 and 'yes\n' or 'no\n')
    return x
  end


  local function check_executable_in_path(env, prog)
    return nil ~= dropuntil(gmatch(getenv'PATH', '[^:]+'), function(path)
      return with(File(path .. '/' .. prog, 'r'), function(h)
        return isfile(h.context) or nil
      end)
    end)
  end


  local function check_header_compile(env, header, extra_hdrs)
    return with(TmpFile('conftest.c', 'w'), function(conftest)
      conftest:write(format('%s\n#include "%s"\n', extra_hdrs, header))
      return 0 == spawn(env, '$compile conftest.c') and 1 or 0
    end)
  end


  local function try_link(env, lib, symbol)
    return with(TmpFile('conftest.c', 'w'), function(conftest)
      conftest:write(format([[
/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
char %s ();
int main () {
  return %s ();
}
]], symbol, symbol))
      return spawn(env, '$link conftest.c', lib)
    end)
  end


  local function check_func_decl(env, fname, extra_hdrs)
    return with(TmpFile('conftest.c', 'w'), function(conftest)
      conftest:write(format([[
%s
int
main()
{
#ifndef %s
  (void) %s;
#endif
  return 0;
}
]], extra_hdrs, fname, fname))
      return 0 == spawn(env, '$compile conftest.c') and 1 or 0
    end)
  end


  local function check_func_link(env, fname)
    return with(TmpFile('conftest.c', 'w'), function(conftest)
      conftest:write(format([[
/* Define to an innocous variant, in case <limits.h> declares it.
   For example, HP-UX 11i <limits,h> declares gettimeofday.  */
#define %s innocuous_%s

/* System header to define __stub macros and hopefully few prototypes,
   which can conflict with declaration below.
   Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
   <limits.h> exists even on freestanding compilers.  */

#ifdef __STDC__
# include <limits.h>
#else
# include <assert.h>
#endif

#undef %s

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
char %s ();

/* The GNU C library defines this for functions which it implements
   to always fail with ENOSYS.  Some functions are actually named
   something starting with __ and the normal name is an alias.  */
#if defined __stub_%s || defined __stub__%s
choke me
#endif

int main () {
  return %s ();
}
]], fname, fname, fname, fname, fname, fname, fname))
      return spawn(env, '$link conftest.c $libs') == 0 and 1 or 0
    end)
  end


  local configure = setmetatable(OrderedDict({
    checkprog = function(L, env, config)
      return dropuntil(config.progs, function(prog)
        checking(L, 'for', prog)
        if found_prog(L, check_executable_in_path(env, prog)) then
          return prog
        end
      end) or fatal('cannot find ' .. config.checkprog)
    end
  }, {
    checkheader = function(L, env, config)
      checking(L, 'for', config.checkheader)

      local extra_hdrs = map(config.includes or {}, function(include)
        return format('#include "%s"', include)
      end)
      return found_result(
        L,
        check_header_compile(env, config.checkheader, concat(extra_hdrs, '\n'))
      )
    end
  }, {
    checkdecl = function(L, env, config)
      checking(L, 'whether', config.checkdecl, 'is declared')

      local extra_hdrs = map(config.includes or {}, function(include)
        return format('#include "%s"', include)
      end)
      return found_result(
        L,
        check_func_decl(env, config.checkdecl, concat(extra_hdrs, '\n'))
      )
    end
  }, {
    searchlibs = function(L, env, config)
      checking(L, 'for library containing', config.symbol)

      local libraries, symbol = config.searchlibs, config.symbol
      local libs = reduce(libraries, {''}, function(r, lib)
        append(r, '-l' .. lib)
      end)
      return dropuntil(libs, function(lib)
        if try_link(env, lib, symbol) == 0 then
          if lib ~= '' then
            if CONFIGENV.libs ~= '' then
              CONFIGENV.libs = CONFIGENV.libs .. ' '  -- FIXME
            end
            CONFIGENV.libs = CONFIGENV.libs .. lib
          end
          return found_library(L, lib)
        end
      end) or call(function()
        L.verbose '\n'
        fatal("required symbol '%s' not found in any of libc, lib%s",
          symbol, concat(libraries, ', lib'))
      end)
    end
  }, {
    checkfunc = function(L, env, config)
      checking(L, 'for', config.checkfunc)
      return found_result(L, check_func_link(env, config.checkfunc))
    end
  }), {
    __call = function(self, L, env, config)
      return case(type(config), {
        ['number'] = function()
          return str(config)
        end,

        ['string'] = function()
          return config
        end,

        ['table'] = function()
          return dropuntil(self, function(fname)
            if config[fname] ~= nil then
              return apply(self[fname], {L, env, config})
            end
          end) or fatal("unable to configure with keys '%s'",
            concat(keys(config), "', '"))
        end,

        function(type)
          fatal("unsupported configure type '%s'", type)
        end,
      })
    end,
  })


  return {
    config_compiler = function(L, env)
      local CC = env.CC
      if CC == nil then
        CC = configure(L, env, {checkprog='C compiler', progs=CCPROGS})
        env = makeenv(env, {CC=CC})
      end

      checking(L, interpolate(env, 'whether $CC works'))
      local works, err = with(TmpFile('conftest.c', 'w'), function(conftest)
        conftest:write('typedef int x;\n')
        return spawn(env, '$compile conftest.c')
      end)
      if works ~= 0 then
        L.verbose 'no\n'
        stderr:write(err .. '\n')
        fatal('could not find a working C compiler')
      end
      found_prog(L, CC)
      return env
    end,

    config_ldoc = function(L, env)
      local LDOC = env.LDOC
      if LDOC == nil then
        LDOC = configure(L, env, {checkprog='LDocs generator', progs={'ldoc', 'true'}})
        env = makeenv(env, {LDOC=LDOC})
      end
      return env
    end,


    configure = configure,

    spawn = spawn,
  }
end



package.preload['luke.environment'] = function()
  local _ENV = require  'std.normalize' {
    'luke.platforms',
    'std.functional',
    LUAVERSION = string.gsub(_VERSION, '[^0-9%.]+', ''),
  }


  local env_mt = {
    __index = function(self, varname)
      return dropuntil(self, function(env)
        local value = env[varname]
        if value ~= nil then
          self[varname] = value
          return value
        end
      end)
    end,
  }


  local function interpolate_with(pattern, env, s)
    local r = ''
    while r ~= s do
      r = s
      s = gsub(r, pattern, function(varname)
        return env[varname] or ''
      end)
    end
    return r
  end


  local function isenv(t)
    return getmetatable(t) == env_mt
  end


  return {
    CONFIGENV = {
      compile  = '$CC -c $CFLAGS $CPPFLAGS',
      libs     = '',
      link     = '$CC -o conftest $CFLAGS $CPPFLAGS $LDFLAGS',
    },

    DEFAULTENV = filter_platforms {
      LUAVERSION    = LUAVERSION,

      PREFIX        = '/usr/local',
      INST_LIBDIR   = '$PREFIX/lib/lua/$LUAVERSION',
      INST_LUADIR   = '$PREFIX/share/lua/$LUAVERSION',

      LUA_INCDIR    = '/usr/include/lua$LUAVERSION',

      LIB_EXTENSION = 'so',
      OBJ_EXTENSION = 'o',

      INSTALL       = 'cp',
      MAKEDIRS      = 'mkdir -p',

      COMPILE       = '$CC $CFLAGS $LIBFLAGS $PKGFLAGS $CPPFLAGS',
      CFLAGS        = '-O2',
      platforms     = {
        macosx  = {
          LIBFLAGS  = '-fPIC -bundle -undefined dynamic_lookup -all_load',
        },
        LIBFLAGS    = '-shared -fPIC',
      },
    },

    SHELLENV = setmetatable({}, {
      __index = function(_, v)
        return getenv(v)
      end,
    }),

    expand = bind(interpolate_with, {'@([^@]+)@'}),
    interpolate = bind(interpolate_with, {'%$([%w_]+)'}),

    makeenv = function(...)
      local env = reduce(except(pack(...), nil), function(r, t)
        if isenv(t) then
          map(t, bind(append, {r}))
        else
          append(r, t)
        end
      end)
    
      return setmetatable(env, env_mt)
    end,
  }
end



package.preload['luke.lukefile'] = function()
  local _ENV = require  'std.normalize' {
    'luke._base',
    'luke.configure',
    'luke.environment',
    'luke.platforms',
    'std.functional',
    'type.context-manager',
  }


  local function has_anykey(t, keylist)
    return any(map(keylist, function(k)
      return t[k] ~= nil
    end))
  end


  local function isconfig(x)
    return istable(x) and has_anykey(x, configure)
  end


  local function collect_configs(luke, modulename, configs)
    configs = configs or {}
    for k, v in next, luke do
      if isconfig(v) then
        append(configs, {t=luke, k=k, module=modulename})
      elseif istable(v) then
        if k == 'modules' then
          for name, rules in next, v do
            collect_configs(rules, name, configs)
          end
        else
          collect_configs(v, modulename, configs)
        end
      end
    end
    return configs
  end


  -- Sort according to the key order in configure itself.
  local weighting = setmetatable(copy(configure), {
    __call = function(self, config)
      local t = config.t[config.k]
      for i = 1, len(self) do
        if t[self[i]] ~= nil then
          return i
        end
      end
    end
  })


  local function config_cmp(a, b)
    return weighting(a) < weighting(b)
  end


  local function fill_templates(env, src, dest)
    with(File(dest, 'w'), function(cm)
      for line in lines(src) do
        cm:write(expand(env, line) .. '\n')
      end
    end)
    return dest
  end


  local function rewrite_template_files(L, env, source)
    return case(source, {
      ['(.+)%.in'] = function(r)
        L.write('creating ' .. r .. '\n')
        return fill_templates(env, r .. '.in', r)
      end,

      source,
    })
  end


  local function normalize_configs(config)
    return cond({
      [not istable(config)] = config
    }, {
      [not isconfig(config)] = function()
        return mapvalues(config, normalize_configs)
      end
    }, {
      [true] = function()
        local seqkeys = {'includes', 'progs', 'searchlibs'}
        local r = mapvalues(pluck(seqkeys, config), function(v)
          return isstring(v) and {v} or v
        end)
        return merge(r, config)
      end
    })
  end


  local function normalize_rules(rules)
    return case(type(rules), {
      ['nil'] = nop,

      ['string'] = function()
        return {sources={rules}}
      end,

      ['table'] = function()
        if len(rules) > 0 then
          return {sources=rules}
        elseif isstring(rules.sources) then
          return merge({sources = {rules.sources}}, normalize_configs(rules))
        end
        return normalize_configs(rules)
      end,

      function(v)
        fatal("unsupported rule type '%s'", v)
      end,
    })
  end


  return {
    loadluke = function(filename)
      local content, err = slurp(File(filename))
      if content == nil then
        return nil, err
      end
      local r = {}
      local chunk, err = loadstring(content, filename, r)
      if chunk == nil then
        return nil, "Error loading file: " .. err
      end
      local ok, err = pcall(chunk)
      if not ok then
        return nil, "Error running file: " .. err
      end
      r = filter_platforms(r)
      r.modules = mapvalues(r.modules, normalize_rules)
      r.ldocs = normalize_rules(r.ldocs)
      return r
    end,

    run_configs = function(L, env, luke)
      local all_configs = collect_configs(luke)
      sort(all_configs, config_cmp)
      map(all_configs, function(config)
        t = config.t[config.k]
        config.t[config.k] = configure(L, env, t)
      end)
    end,

    run_templates = function(L, env, luke)
      local r = copy(luke)
      local rewrite = bind(rewrite_template_files, {L, env})
      r.modules = mapvalues(r.modules, function(rules)
        rules.sources = map(rules.sources, rewrite)
      end)
      if r.ldocs then
        r.ldocs.sources = map(r.ldocs.sources, rewrite)
      end
      return r
    end,
  }
end



package.preload['luke.platforms'] = function()
  local _ENV = require  'std.normalize' {
    'std.functional',

    CANON = {
      ['AIX']       = {'unix', 'aix'},
      ['FreeBSD']   = {'unix', 'freebsd', 'bsd'},
      ['OpenBSD']   = {'unix', 'openbsd', 'bsd'},
      ['NetBSD']    = {'unix', 'netbsd', 'bsd'},
      ['Darwin']    = {'unix', 'macosx', 'bsd'},
      ['Linux']     = {'unix', 'linux'},
      ['SunOS']     = {'unix', 'solaris'},
      ['CYGWIN.*']  = {'unix', 'cygwin'},
      ['Windows.*'] = {'windows', 'win32'},
      ['MINGW.*']   = {'windows', 'mingw32', 'win32'},
      ['procnto.*'] = {'qnx'},
      ['QNX']       = {'qnx'},
    },
  }


  local platforms = CANON[popen('uname -s'):read'*l'] or {'unix'}


  local allplatforms = reduce(values(CANON), function(acc, platforms)
    map(platforms, function(v)
      acc[v] = true
    end)
  end)


  local function isplatform(x)
    return allplatforms[x] ~= nil
  end


  local function filter_platforms(t)
    local r = {}
    for k, v in next, t do
      if k == 'platforms' then
        local branches, defaults = partition(keys(v), isplatform)
        local matches = filter(branches, bind(contains, {platforms}))
        merge(r, hoist(matches, v) or pluck(defaults, v))
      elseif istable(v) then
        r[k] = filter_platforms(v)
      else
        r[k] = r[k] or v
      end
    end
    return r
  end

  return {
    filter_platforms = filter_platforms,
  }
end



package.preload['std.functional'] = function()
  local _ENV = require  'std.normalize' {
    destructure	= next,
    isfile	= function(x) return io.type(x) == 'file' end,
    wrap	= coroutine.wrap,
    yield	= coroutine.yield,
  }


  local function apply(fn, argu)
    assert(fn ~= nil, 'cannot apply nil-valued function')
    if iscallable(fn) then
      return fn(unpack(argu))
    end
    return fn
  end


  local function call(fn, ...)
    assert(fn ~= nil, 'cannot call nil-valued function')
    if iscallable(fn) then
      return fn(...)
    end
    return fn
  end


  local function wrapnonnil(iterator)
    return function(...)
      local r = pack(iterator(...))
      if r[1] ~= nil then
        return r
      end
    end
  end


  local function each(seq)
    if type(seq) == 'function' then
      return wrapnonnil(seq)
    end
    local i, n = 0, int(seq.n) or len(seq)
    return function()
      if i < n then
        i = i + 1
        return pack(seq[i]) -- support seq[i] == nil
      end
    end
  end


  local function eq(x)
    return function(y)
      return x == y
    end
  end


  local function isnonnil(x)
    return x ~= nil
  end


  local function mkpredicate(x)
    return type(x) == 'function' and x or eq(x)
  end


  local function except(seq, predicate)
    predicate = mkpredicate(predicate)
    local r = {}
    for valu in each(seq) do
      if not predicate(unpack(valu)) then
        r[#r + 1] = unpack(valu)
      end
    end
    return r
  end


  local function visit(x)
    if type(x) == 'table' then
      for valu in each(x) do
        visit(unpack(valu))
      end
    else
      yield(x)
    end
  end


  local function flatten(...)
    local r = {}
    for v in wrap(visit), except(pack(...), nil) do
      r[#r + 1] = v
    end
    return r
  end


  return {
    any = function(seq)
      for valu in each(seq) do
        if unpack(valu) then
          return true
        end
      end
      return false
    end,

    apply = apply,

    bind = function(fn, bound)
      local n = bound.n or maxn(bound)

      return function (...)
        local argu, unbound = copy(bound), pack(...)

        local i = 1
        for j = 1, unbound.n do
          while argu[i] ~= nil do
            i = i + 1
          end
          argu[i], i = unbound[j], i + 1
        end
        bound.n = n >= i and n or i - 1

        return apply(fn, argu)
      end
    end,

    call = call,

    case = function(s, branches)
      if branches[s] ~= nil then
        return call(branches[s], s)
      end
      local DEFAULT = 1
      for pattern, fn in next, branches do
        if pattern ~= DEFAULT then
          local argu = pack(match(s, '^' .. pattern .. '$'))
          if argu[1] ~= nil then
            return apply(fn, argu)
          end
        end
      end
      local default = branches[DEFAULT]
      if iscallable(default) then
        return call(default, s)
      end
      return default
    end,

    cond = function(...)
      for clauseu in each(pack(...)) do
        local expr, consequence = destructure(unpack(clauseu))
        if expr then
          return call(consequence, expr)
        end
      end
    end,

    contains = function(seq, predicate)
      if type(predicate) ~= 'function' then
        predicate = eq(predicate)
      end
      for valu in each(seq) do
        if predicate(unpack(valu)) then
          return true
        end
      end
    end,

    destructure = destructure,

    dropuntil = function(seq, predicate, block)
      if block == nil then
        predicate, block = isnonnil, predicate
      end
      for valu in each(seq) do
        local r = pack(block(unpack(valu)))
        if predicate(unpack(r)) then
          return unpack(r)
        end
      end
    end,

    except = except,

    filter = function(seq, predicate)
      predicate = mkpredicate(predicate)
      local r = {}
      for valu in each(seq) do
        if predicate(unpack(valu)) then
          r[#r + 1] = unpack(valu)
        end
      end
      return r
    end,

    flatten = flatten,

    hoist = function(keylist, dict)
      local r = {}
      for keyu in each(keylist) do
        merge(r, dict[unpack(keyu)])
      end
      return next(r) and r or nil
    end,

    id = function(...)
      return ...
    end,

    isempty = function(x)
      return type(x) == 'table' and not next(x)
    end,

    isfile = isfile,

    isfunction = function(x)
      return type(x) == 'function'
    end,

    isnil = function(x)
      return x == nil
    end,

    isstring = function(x)
      return type(x) == 'string'
    end,

    istable = function(x)
      return type(x) == 'table'
    end,

    isnonzero = function(x)
      return x ~= 0
    end,

    keys = function(iterable)
      local r = pack()
      for k in next, iterable or {} do
        append(r, k)
      end
      return r
    end,

    map = function(seq, block)
      local r = pack()
      for valu in each(seq) do
        append(r, block(unpack(valu)))
      end
      return r
    end,

    mapvalues = function(iterable, block)
      local r = {}
      for k, v in next, iterable or {} do
        r[k] = block(v) or v
      end
      return r
    end,

    nop = function() end,

    partition = function(seq, block)
      local r, s = pack(), pack()
      for valu in each(seq) do
        append(block(unpack(valu)) and r or s, unpack(valu))
      end
      return r, s
    end,

    pluck = function(keylist, dict)
      local r = {}
      for keyu in each(keylist) do
        local key = unpack(keyu)
        r[key] = dict[key]
      end
      return next(r) and r or nil
    end,

    reduce = function(seq, acc, block)
      if block == nil then
        acc, block = {}, acc
      end
      for valu in each(seq) do
        acc = block(acc, unpack(valu)) or acc
      end
      return acc
    end,

    values = function(iterable)
      local r = pack()
      for _, v in next, iterable or {} do
        append(r, v)
      end
      return r
    end,

    zip_with = function(iterable, block)
      local r = pack()
      for k, v in next, iterable or {} do
        append(r, block(k, v))
      end
      return r
    end,
  }
end



package.preload['std.normalize'] = function()
  local ceil = math.ceil
  local loadstring = loadstring
  local pack = table.pack or function(...) return {n=select('#', ...), ...} end
  local remove = table.remove
  local setfenv = setfenv
  local unpack = table.unpack or unpack


  local function copy(iterable)
    local r = {}
    for k, v in next, iterable or {} do
      r[k] = v
    end
    return r
  end


  local int = math.tointeger or function(x)
    local i = tonumber(x)
    if i and ceil(i) - i == 0.0 then
      return i
    end
  end


  local function iscallable(x)
    return type(x) == 'function' and x or (getmetatable(x) or {}).__call
  end


  local function getmetamethod(x, n)
    return iscallable((getmetatable (x) or {})[tostring(n)])
  end


  local function rawlen(x)
    if type(x) == 'table' then
      return #x
    end

    local n = #x
    for i = 1, n do
      if x[i] == nil then
        return i - 1
      end
    end
    return n
  end


  local function len(x)
    local m = getmetamethod(x, '__len')
    return m and m(x) or rawlen(x)
  end


  if setfenv then

    local _loadstring = loadstring
    loadstring = function(s, filename, env)
      chunk, err = _loadstring(s, filename)
      if chunk ~= nil and env ~= nil then
        setfenv(chunk, env)
      end
      return chunk, err
    end

  else

    loadstring = function(s, filename, env)
      return load(s, filename, "t", env)
    end

    setfenv = function() end

  end


  return setmetatable({
    append = function(seq, v)
      local n = (int(seq.n) or len(seq)) + 1
      seq.n, seq[n] = n, v
      return seq
    end,

    arg = arg,
    assert = assert,
    close = io.close,
    concat = table.concat,
    copy = copy,
    exit = os.exit,
    float = tonumber,
    format = string.format,
    getenv = os.getenv,
    getmetatable = getmetatable,
    getmetamethod = getmetamethod,
    gmatch = string.gmatch,
    gsub = string.gsub,
    int = int,
    iscallable = iscallable,
    len = len,
    lines = io.lines,
    loadstring = loadstring,
    match = string.match,

    maxn = function(iterable)
      local n = 0
      for k, v in next, iterable or {} do
        local i = int(k)
        if i and i > n then
          n = i
        end
      end
      return n
    end,

    merge = function(r, ...)
      local argu = pack(...)
      for i = 1, argu.n do
        for k, v in next, argu[i] or {} do
          r[k] = r[k] or v
        end
      end
      return r
    end,

    next = next,
    open = io.open,
    pack = pack,
    pcall = pcall,

    pop = function(seq)
      if int(seq.n) then
        seq.n = seq.n - 1
      end
      return remove(seq)
    end,

    popen = io.popen,
    print = print,
    rm = os.remove,
    select = select,
    setmetatable = setmetatable,
    sort = table.sort,
    stderr = io.stderr,
    stdout = io.stdout,
    str = tostring,
    sub = string.sub,
    tmpname = os.tmpname,
    type = type,

    unpack = function(seq, i, j)
      return unpack(seq, int(i) or 1, int(j) or int(seq.n) or len(seq))
    end,
  }, {
    __call = function(self, env, level)
      local userenv, level = copy(self), level or 1
      for name, value in next, env do
        if int(name) and type(value) == 'string' then
          for k, v in next, require(value) do
            userenv[k] = userenv[k] or v
          end
        else
          userenv[name] = value
        end
      end
      setfenv(level + 1, userenv)
      return userenv
    end,
  })
end



package.preload['type.context-manager'] = function()
 local _ENV = require 'std.normalize' {
    'std.functional',
  }


  local contextmanager_mt = {
    -- Return a closure that forwards arguments to the named method
    -- on the context object with the correct `self` argument value.
    __index = function(self, key)
      if iscallable(self.context[key]) then
        return function(_, ...)
          return self.context[key](self.context, ...)
        end
      end
    end,
  }


  local function ContextManager(release, acquire, ...)
    local cm = {
      context = acquire(...),
      release = release,
      n       = select("#", ...), ...
    }
    if cm.context ~= nil then
      setmetatable(cm, contextmanager_mt)
    end
    return cm
  end


  local function context_close(cm)
    return isfile(cm.context) and close(cm.context)
  end


  local function with(...)
    local argu = pack(...)
    local block = pop(argu)
    local r = pack(apply(block, argu))
    map(argu, function(cm)
      cm:release()
    end)
    return unpack(r)
  end


  return {
    File = function(fname, mode)
      return ContextManager(context_close, open, fname, mode)
    end,

    Pipe = function(cmd, mode)
      return ContextManager(context_close, popen, cmd, mode)
    end,

    TmpFile = function(fname, mode)
      return ContextManager(function(cm)
        if context_close(cm) then
          return rm(cm[1])
        end
        return false
      end, open, fname, mode)
    end,

    slurp = function(cm)
      return with(cm, function(h)
        return h:read '*a'
      end)
    end,

    with = with,
  }
end



package.preload['type.dict'] = function()
  local _ENV = require 'std.normalize' {
    destructure = next,
  }

  return {
    OrderedDict = function(...)
      local r, argu = {}, pack(...)
      for i = 1, argu.n do
        local k, v = destructure(argu[i])
        append(r, k)
        r[k] = v
      end
      return r
    end,
  }
end



os.exit(require 'luke'.main(arg))
